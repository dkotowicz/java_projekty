package main.java;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class Crud_posrednik 
{
	private Connection connection;
	private Statement stmt;
	private PreparedStatement delete_posrednik;
	private PreparedStatement delete_all_posredniki;
	private PreparedStatement update_posredniki;
	
	
	public Connection getConnection() {
		Connection connection = null;
		return connection;
	}
	public Crud_posrednik(){
		try{
			connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			stmt = connection.createStatement();
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("posrednik".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists) stmt.executeUpdate("CREATE TABLE posrednik (id_posrednik int GENERATED BY DEFAULT AS IDENTITY, nazwa varchar(100), regon varchar(10) UNIQUE, data_zalozenia date, id_nieruchomosc, FOREIGN KEY(id_nieruchomosc) REFERENCES nieruchomosc(id_nieruchomosc) ON DELETE CASCADE ON UPDATE CASCADE");
			delete_posrednik = connection.prepareStatement("DELETE FROM posrednik WHERE regon = ?");
			delete_all_posredniki = connection.prepareStatement("DELETE FROM posrednik");
			update_posredniki = connection.prepareStatement("UPDATE posrednik SET nazwa=?, regon=? data_zalozenia=? id_nieruchomosc WHERE regon=?");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public boolean delete_posrednik(Posrednik posrednik){
		int correct = 0;
			try {
				delete_posrednik.setString(1, posrednik.get_regon());
				correct = delete_posrednik.executeUpdate();
				connection.commit();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			if(correct == 1){return true;}else{return false;}
		}
	public boolean delete_all_posredniki(Posrednik posrednik){
		int correct = 0;
			try {
				correct = delete_all_posredniki.executeUpdate();
				connection.commit();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			if(correct == 1){return true;}else{return false;}
		}
	public boolean update_posrednik(Posrednik stare, Posrednik nowe) {
		int correct = 0;
		try {
			update_posredniki.setString(1, nowe.get_nazwa());
			update_posredniki.setString(2, nowe.get_regon());
			update_posredniki.setString(4, stare.get_regon());
			correct = update_posredniki.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		if(correct == 1){return true;}else{return false;}
	}
}
